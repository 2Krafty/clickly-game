{"version":3,"sources":["containers/Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","state","cardData","Object","toConsumableArray","currentScore","topScore","handleCardClick","cardId","isCorrect","_this","forEach","card","id","clicked","handleCorrect","handleIncorrect","shuffledCards","sort","Math","random","setState","_this2","this","react_default","a","createElement","Fragment","className","map","key","src","image","alt","name","onClick","Component","App","containers_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiHeA,6MArGbC,MAAQ,CACNC,SAASC,OAAAC,EAAA,EAAAD,CAAKD,GACdG,aAAc,EACdC,SAAU,KAIZC,gBAAkB,SAAAC,GAEhB,IAAIC,GAAY,EAGVP,EAAQC,OAAAC,EAAA,EAAAD,CAAOO,EAAKT,MAAMC,UAKhCA,EAASS,QAAQ,SAAAC,GACXA,EAAKC,KAAOL,IACTI,EAAKE,UACRL,GAAY,EACZG,EAAKE,SAAU,MAQrBL,EAAYC,EAAKK,cAAcb,GAAYQ,EAAKM,gBAAgBd,MAGlEa,cAAgB,SAAAb,GAEd,IAAMe,EAAgBf,EAASgB,KAAK,iBAAM,GAAMC,KAAKC,WAG/Cf,EAAeK,EAAKT,MAAMI,aAAe,EAE3CC,EAAWI,EAAKT,MAAMK,SAGtBD,EAAeC,IACjBA,EAAWD,GAGbK,EAAKW,SAAS,CACZnB,SAAUe,EACVZ,aAAcA,EACdC,SAAUA,OAIdU,gBAAkB,SAAAd,GAChB,IAAMe,EAAgBf,EAASgB,KAAK,iBAAM,GAAMC,KAAKC,WAGrDH,EAAcN,QAAQ,SAAAC,GAAI,OAAKA,EAAKE,SAAU,IAE9CJ,EAAKW,SAAS,CACZnB,SAAUe,EACVZ,aAAc,6EAIT,IAAAiB,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2DACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,qBAAhB,eACAJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,wBAAhB,kBACkBL,KAAKtB,MAAMI,aAD7B,kBAC0DkB,KAAKtB,MAAMK,WAGvEkB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8DACbJ,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,iFAEFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kDAEZL,KAAKtB,MAAMC,SAAS2B,IAAI,SAAAjB,GACvB,OACEY,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BAA2BE,IAAKlB,EAAKC,IAClDW,EAAAC,EAAAC,cAAA,OACEK,IAAKnB,EAAKoB,MACVC,IAAKrB,EAAKsB,KACVN,UAAU,kCACVO,QAAS,kBAAMb,EAAKf,gBAAgBK,EAAKC,oBAzF1CuB,aCNJC,EAFH,kBAAMb,EAAAC,EAAAC,cAACY,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.af2ed4e9.chunk.js","sourcesContent":["// import dependences and data\r\nimport React, { Component } from 'react';\r\nimport cardData from '../clickCards.json';\r\n/* \r\n{\r\n  id: 1,\r\n  image: \"./images/ryu.jpg\",\r\n  clicked: false,\r\n} \r\n*/\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    cardData: [...cardData],\r\n    currentScore: 0,\r\n    topScore: 0\r\n  };\r\n\r\n  // create method to handle clicking on a card\r\n  handleCardClick = cardId => {\r\n    // create a flag variable to check if we're correct or not\r\n    let isCorrect = false;\r\n\r\n    // make a copy of the cardData from state\r\n    const cardData = [...this.state.cardData];\r\n\r\n    // loop over that copied array and find the object with the id you clicked on\r\n    // check if card you clicked on has been clicked before\r\n    // if no => set isCorrect to true and set the card's clicked status to true\r\n    cardData.forEach(card => {\r\n      if (card.id === cardId) {\r\n        if (!card.clicked) {\r\n          isCorrect = true;\r\n          card.clicked = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    // check if isCorrect is true or false\r\n    // if true => run logic for handling a correct guess\r\n    // if false => run logic for handling an incorrect guess\r\n    isCorrect ? this.handleCorrect(cardData) : this.handleIncorrect(cardData);\r\n  };\r\n\r\n  handleCorrect = cardData => {\r\n    // shuffle cards\r\n    const shuffledCards = cardData.sort(() => 0.5 - Math.random());\r\n\r\n    // get current score and add 1 to it\r\n    const currentScore = this.state.currentScore + 1;\r\n\r\n    let topScore = this.state.topScore;\r\n\r\n    // check if current score is greater than topScore\r\n    if (currentScore > topScore) {\r\n      topScore = currentScore;\r\n    }\r\n\r\n    this.setState({\r\n      cardData: shuffledCards,\r\n      currentScore: currentScore,\r\n      topScore: topScore\r\n    });\r\n  };\r\n\r\n  handleIncorrect = cardData => {\r\n    const shuffledCards = cardData.sort(() => 0.5 - Math.random());\r\n\r\n    // reset all cards to not be clicked\r\n    shuffledCards.forEach(card => (card.clicked = false));\r\n\r\n    this.setState({\r\n      cardData: shuffledCards,\r\n      currentScore: 0\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"navbar navbar-dark bg-dark d-flex justify-space-between\">\r\n          <span className=\"navbar-brand mb-0\">Clicky Game</span>\r\n          <span className=\"scoreInfo text-light\">\r\n            Current Score: {this.state.currentScore} || Top Score: {this.state.topScore}\r\n          </span>\r\n        </nav>\r\n        <div className=\"jumbotron jumbotron-fluid bg-warning text-dark text-center\">\r\n          <h1>Welcome to the clicky game!</h1>\r\n          <p>Click on a card to get started. Don't click on the same card twice.</p>\r\n        </div>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row align-items-center justify-content-between\">\r\n            {/* print out cards here */}\r\n            {this.state.cardData.map(card => {\r\n              return (\r\n                <div className=\"col-12 col-sm-3 col-md-2\" key={card.id}>\r\n                  <img\r\n                    src={card.image}\r\n                    alt={card.name}\r\n                    className=\"img-fluid img-thumbnail rounded\"\r\n                    onClick={() => this.handleCardClick(card.id)}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// export Game component\r\nexport default Game;\r\n"," import React from 'react';\r\nimport Game from './containers/Game';\r\n\r\nconst App = () => <Game/>\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}